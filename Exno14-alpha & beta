import math
def evaluate(board):
    pass
def alpha_beta(board, depth, alpha, beta, isMaximizing):
    score = evaluate(board)
    if score is not None:
        return score
    if isMaximizing:
        for move in possible_moves(board):
            make_move(board, move)
            score = alpha_beta(board, depth + 1, alpha, beta, False)
            undo_move(board, move)
            alpha = max(alpha, score)
            if beta <= alpha:
                break
        return alpha
    else:
        for move in possible_moves(board):
            make_move(board, move)
            score = alpha_beta(board, depth + 1, alpha, beta, True)
            undo_move(board, move)
            beta = min(beta, score)
            if beta <= alpha:
                break
        return beta
def make_move(board, move):
    pass
def undo_move(board, move):
    pass
def possible_moves(board):
    pass
def best_move(board):
    bestScore = -math.inf
    move = None
    alpha = -math.inf
    beta = math.inf
    for possible_move in possible_moves(board):
        make_move(board, possible_move)
        score = alpha_beta(board, 0, alpha, beta, False)
        undo_move(board, possible_move)
        if score > bestScore:
            bestScore = score
            move = possible_move
    return move
def is_winner(board, player):
    for i in range(3):
        if all(board[i][j] == player for j in range(3)):
            return True
        if all(board[j][i] == player for j in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True
    return False
def is_draw(board):
    return all(board[i][j] != ' ' for i in range(3) for j in range(3))
def print_board(board):
    for row in board:
        print('|'.join(row))
        print('-' * 5)
def main():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    players = ['X', 'O']
    current_player = 0
    while True:
        print_board(board)
        player = players[current_player]
        print(f"Player {player}'s turn:")
        row = int(input("Enter row: "))
        col = int(input("Enter column: "))
        if board[row][col] == ' ':
            board[row][col] = player
        else:
            print("Invalid move, try again.")
            continue
        if is_winner(board, player):
            print_board(board)
            print(f"Player {player} wins!")
            break
        elif is_draw(board):
            print_board(board)
            print("It's a draw!")
            break
        current_player = (current_player + 1) % 2
if __name__ == "__main__":
    main()
